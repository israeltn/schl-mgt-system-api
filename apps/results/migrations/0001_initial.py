# Generated by Django 4.2.7 on 2025-06-15 13:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("schools", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("academics", "0002_initial"),
        ("students", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ResultTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("show_ca_scores", models.BooleanField(default=True)),
                ("show_exam_scores", models.BooleanField(default=True)),
                ("show_total_scores", models.BooleanField(default=True)),
                ("show_grades", models.BooleanField(default=True)),
                ("show_positions", models.BooleanField(default=True)),
                ("show_gpa", models.BooleanField(default=True)),
                ("grade_a_min", models.IntegerField(default=80)),
                ("grade_b_min", models.IntegerField(default=70)),
                ("grade_c_min", models.IntegerField(default=60)),
                ("grade_d_min", models.IntegerField(default=50)),
                ("grade_e_min", models.IntegerField(default=40)),
                (
                    "principal_signature",
                    models.ImageField(blank=True, null=True, upload_to="signatures/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result_template",
                        to="schools.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_subjects", models.IntegerField(default=0)),
                (
                    "total_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "average_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("gpa", models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ("position", models.IntegerField(blank=True, null=True)),
                ("class_teacher_comment", models.TextField(blank=True)),
                ("principal_comment", models.TextField(blank=True)),
                (
                    "punctuality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("very_good", "Very Good"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "neatness",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("very_good", "Very Good"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_published", models.BooleanField(default=False)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_for_term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_term_results",
                        to="academics.class",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="term_results",
                        to="students.student",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_results",
                        to="academics.term",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "term")},
            },
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_ca",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="First Continuous Assessment",
                    ),
                ),
                (
                    "second_ca",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Second Continuous Assessment",
                    ),
                ),
                (
                    "exam_marks",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Examination Marks",
                    ),
                ),
                ("remarks", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_for_term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="term_results",
                        to="academics.class",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="students.student",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="academics.subject",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        limit_choices_to={"role": "teacher"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_results",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="academics.term",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "subject", "term")},
            },
        ),
    ]
